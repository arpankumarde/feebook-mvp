generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Provider model (Organizations/Individuals who collect fees)
model Provider {
  id                 String                @id @default(uuid())
  name               String
  type               AccountType
  city               String?               @db.VarChar(100)
  region             String?               @db.VarChar(2)
  country            String                @default("IN") @db.VarChar(2)
  category           AccountCategory       @default(OTHER)
  status             AccountStatus         @default(PENDING)
  code               String                @unique // Identifier for consumers to find the provider
  adminName          String
  email              String                @unique
  phone              String                @unique @db.VarChar(10)
  password           String
  isVerified         Boolean               @default(false)
  isEmailVerified    Boolean               @default(false)
  isPhoneVerified    Boolean               @default(false)
  walletBalance      Decimal               @default(0) @db.Decimal(10, 2)
  logoUrl            String?               @db.VarChar(600)
  coverImageUrl      String?               @db.VarChar(600)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  verification       ProviderVerification?
  bankAccounts       BankAccount[]
  members            Member[]
  feePlans           FeePlan[]
  walletTransactions WalletTransaction[]
}

// Verification information for providers
model ProviderVerification {
  id               String             @id @default(uuid())
  providerId       String             @unique
  status           VerificationStatus @default(PROCESSING)
  // Common fields
  pocName          String
  pocPanNum        String             @db.VarChar(10)
  pocPanDoc        String
  pocAadhaarNum    String             @db.VarChar(12)
  pocAadhaarDoc    String
  pocDob           DateTime?          @db.Date
  // Organisation-specific fields
  orgName          String
  orgLegalName     String?
  orgType          String?
  orgOtherType     String?
  orgCin           String?
  orgLlpin         String?
  orgGstin         String?
  orgPan           String?
  orgPanDoc        String?
  orgGstDoc        String?
  orgRegDoc        String?
  // Address information 
  address          String
  regAddress       Json?
  verifierResponse Json[]             @default([])
  remarks          String?
  assertedAt       DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  provider         Provider           @relation(fields: [providerId], references: [id])

  @@index([providerId])
}

// Moderator model
model Moderator {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  name       String
  isActive   Boolean  @default(true)
  isSuperMod Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Bank account details for providers
model BankAccount {
  id                 String              @id @default(uuid())
  refId              String?             @unique
  providerId         String
  accNumber          String
  ifsc               String
  accName            String?
  accPhone           String?             @db.VarChar(10)
  bankName           String?
  branchName         String?
  vpa                String?             @db.VarChar(100)
  verifierResponse   Json?
  verificationStatus VerificationStatus  @default(PENDING)
  isDefault          Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  provider           Provider            @relation(fields: [providerId], references: [id])
  withdrawalRequests WithdrawalRequest[]
}

// Consumer model (End users who pay fees)
model Consumer {
  id              String           @id @default(uuid())
  email           String?
  phone           String           @unique @db.VarChar(10)
  firstName       String?
  lastName        String?
  isPhoneVerified Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  memberships     ConsumerMember[]
  transactions    Transaction[]
}

// Member model (Members of providers)
model Member {
  id                  String           @id @default(uuid())
  uniqueId            String           @default(uuid())
  firstName           String
  middleName          String?
  lastName            String
  dateOfBirth         DateTime?        @db.Date
  gender              Gender?
  phone               String           @db.VarChar(10)
  email               String?
  active              Boolean          @default(true)
  session             String?          @default("2024-25") @db.VarChar(10)
  category            String?
  subcategory         String?
  guardianName        String?
  relationship        String?
  providerId          String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  provider            Provider         @relation(fields: [providerId], references: [id])
  feePlans            FeePlan[]
  consumerMemberships ConsumerMember[]

  @@unique([providerId, uniqueId])
}

// Junction table for Consumer-Member many-to-many relationship
model ConsumerMember {
  id         String   @id @default(uuid())
  consumerId String
  memberId   String
  claimedAt  DateTime @default(now())
  consumer   Consumer @relation(fields: [consumerId], references: [id])
  member     Member   @relation(fields: [memberId], references: [id])

  @@unique([consumerId, memberId])
}

// Fee plan model (Fee structure created by providers)
model FeePlan {
  id                 String          @id @default(uuid())
  providerId         String
  memberId           String
  name               String
  description        String?
  amount             Decimal         @db.Decimal(10, 2)
  status             FeePlanStatus   @default(DUE)
  dueDate            DateTime        @db.Date
  isOfflinePaid      Boolean         @default(false)
  consumerClaimsPaid Boolean         @default(false)
  receipt            String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  provider           Provider        @relation(fields: [providerId], references: [id])
  member             Member          @relation(fields: [memberId], references: [id])
  transactions       Transaction[]
  orders             Order[]
  Notifications      Notifications[]
}

// Order model for payments
model Order {
  id               String        @id @default(uuid())
  feePlanId        String
  externalOrderId  String        @unique
  amount           Decimal       @db.Decimal(10, 2)
  currency         String        @default("INR")
  status           OrderStatus   @default(ACTIVE)
  customer         Json?
  orderMeta        Json?
  orderTags        Json?
  note             String?
  expiryTime       DateTime?
  paymentSessionId String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  feePlan          FeePlan       @relation(fields: [feePlanId], references: [id])
  transactions     Transaction[]

  @@index([feePlanId])
}

// Transaction model for payment attempts
model Transaction {
  id                    String        @id @default(uuid())
  orderId               String
  consumerId            String?
  feePlanId             String?
  externalPaymentId     String?       @unique
  amount                Decimal       @db.Decimal(10, 2)
  status                PaymentStatus
  paymentTime           DateTime?
  paymentCurrency       String
  paymentMessage        String?
  bankReference         String?
  paymentMethod         Json?
  paymentGroup          String?
  paymentSurcharge      Json?
  paymentGateway        String
  paymentGatewayDetails Json?
  paymentOffers         Json[]        @default([])
  errorDetails          Json?
  terminalDetails       Json?
  source                String
  webhookVerified       Boolean       @default(false)
  webhookResponse       Json?
  webhookAttempt        Int?          @default(0)
  webhookSignature      String?
  webhookTimestamp      DateTime?
  webhookVersion        String?
  idempotencyKey        String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  consumer              Consumer?     @relation(fields: [consumerId], references: [id])
  order                 Order         @relation(fields: [orderId], references: [id])
  feePlan               FeePlan?      @relation(fields: [feePlanId], references: [id])

  @@index([orderId])
  @@index([consumerId])
  @@index([feePlanId])
}

// Provider wallet transactions
model WalletTransaction {
  id          String   @id @default(uuid())
  providerId  String
  amount      Decimal  @db.Decimal(10, 2)
  type        String
  status      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  provider    Provider @relation(fields: [providerId], references: [id])
}

// Withdrawal requests from providers
model WithdrawalRequest {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  amount        Decimal     @db.Decimal(10, 2)
  status        String
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
  bankAccountId String
}

// OTP model for storing one-time passwords
model Otp {
  id        String   @id @default(uuid())
  email     String?
  phone     String?
  otp       String   @db.VarChar(6)
  channel   String   @default("EMAIL")
  purpose   String
  refId     String?
  attempts  Int      @default(0)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([phone])
  @@index([expiresAt])
}

model Notifications {
  id        String   @id @default(uuid())
  feePlanId String
  channel   Channel  @default(EMAIL)
  message   String
  publish   DateTime
  metadata  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feePlan FeePlan @relation(fields: [feePlanId], references: [id])
}

model Policy {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Query {
  id        String   @id @default(uuid())
  email     String?
  phone     String?
  subject   String?
  message   String
  status    String   @default("OPEN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([phone])
}

enum AccountType {
  INDIVIDUAL
  ORGANIZATION
}

enum AccountCategory {
  EDUCATIONAL
  HIGHER_EDUCATION
  COACHING
  FITNESS_SPORTS
  OTHER
}

enum AccountStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum VerificationStatus {
  PROCESSING
  PENDING
  VERIFIED
  REJECTED
}

enum OrderStatus {
  ACTIVE
  PAID
  EXPIRED
  TERMINATED
  TERMINATION_REQUESTED
}

enum PaymentStatus {
  SUCCESS
  FAILED
  NOT_ATTEMPTED
  PENDING
  FLAGGED
  CANCELLED
  VOID
  USER_DROPPED
}

enum FeePlanStatus {
  DUE
  PAID
  OVERDUE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Channel {
  PHONE
  EMAIL
}
